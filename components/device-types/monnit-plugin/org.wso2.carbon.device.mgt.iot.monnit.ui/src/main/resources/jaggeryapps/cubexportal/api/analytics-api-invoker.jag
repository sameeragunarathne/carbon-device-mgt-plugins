<%
var log = new Log("api/analytics-api-invoker-.jag");

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var devicemgtProps = require("/app/modules/conf-reader/main.js")["conf"];
var serviceInvokers = require("/app/modules/oauth/token-protected-service-invokers.js")["invokers"];
var utility = require("/app/modules/utility.js")["utility"];
if (uriMatcher.match("/{context}/api/analytics-api-invoker.jag")) {
    var url = "/monnit/1.0.0/monnit/sensor/stats";
    var targetURL = devicemgtProps["httpsURL"] + url;
    var host = devicemgtProps["generalConfig"]["host"];
    var res = host.split(":");

    var analyticsPayload = request.getContent();
    var payloadObj;
    //log.info(stringify(analyticsPayload));
    if(typeof analyticsPayload === 'object') {
        payloadObj = analyticsPayload;
    } else {
        payloadObj = parse(analyticsPayload);
    }
    var gatewayId = payloadObj.gatewayMessage.gatewayID;

    for(var i=0;i<payloadObj.sensorMessages.length;i++) {
        var url = 'http:' + res[1] + ':9765/endpoints/Monnit-Http-Receiver';
        payloadObj.sensorMessages[i].gatewayID = gatewayId;
	var dateStr = payloadObj.sensorMessages[i].messageDate;
	var match = dateStr.match(/^(\d+)-(\d+)-(\d+) (\d+)\:(\d+)\:(\d+)$/);
	var date2 = new Date(match[1], match[2] - 1, match[3], match[4], match[5], match[6]);
	log.info(date2.getTime());
	var date1 = new Date(payloadObj.sensorMessages[i].messageDate);
        var date  = Number(date2.getTime()/1000).toPrecision();
        log.info(date);
        payloadObj.sensorMessages[i].messageDate = date;
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(payloadObj.sensorMessages[i]);
    }
}
%>
